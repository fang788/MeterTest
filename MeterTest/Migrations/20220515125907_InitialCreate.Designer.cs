// <auto-generated />
using System;
using MeterTest.Source.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeterTest.Migrations
{
    [DbContext(typeof(MeterTestDbContext))]
    [Migration("20220515125907_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("MeterTest.Source.Dlt645.DataId", b =>
                {
                    b.Property<string>("ForeignKey_DataIdTableName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ForeignKey_DataIdTableIsConfig")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ForeignKey_DataIdTableProjectName")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("DataArray")
                        .HasColumnType("BLOB");

                    b.Property<int>("DataBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsReadable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWritable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.HasKey("ForeignKey_DataIdTableName", "ForeignKey_DataIdTableIsConfig", "ForeignKey_DataIdTableProjectName", "Id", "Name");

                    b.ToTable("DataIds");
                });

            modelBuilder.Entity("MeterTest.Source.Dlt645.Dlt645Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Address")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Authority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperatorCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Password")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Dlt645Servers");
                });

            modelBuilder.Entity("MeterTest.Source.SQLite.DataIdTable", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConfig")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .HasColumnType("TEXT");

                    b.Property<long>("Ticks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name", "IsConfig", "ProjectName");

                    b.HasIndex("ProjectName");

                    b.ToTable("DataIdTables");
                });

            modelBuilder.Entity("MeterTest.Source.SQLite.MeterTestConfig", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivationCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BaudRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataBits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Parity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReadTimeout")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SelectParaProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectParaTableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectRwProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectRwTableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StopBits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableBodySerialPortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("MeterTestConfigs");
                });

            modelBuilder.Entity("MeterTest.Source.SQLite.Project", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForeignKey_Project")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUse")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Ticks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.HasIndex("ForeignKey_Project");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MeterTest.Source.Dlt645.DataId", b =>
                {
                    b.HasOne("MeterTest.Source.SQLite.DataIdTable", null)
                        .WithMany()
                        .HasForeignKey("ForeignKey_DataIdTableName", "ForeignKey_DataIdTableIsConfig", "ForeignKey_DataIdTableProjectName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeterTest.Source.SQLite.DataIdTable", b =>
                {
                    b.HasOne("MeterTest.Source.SQLite.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeterTest.Source.SQLite.Project", b =>
                {
                    b.HasOne("MeterTest.Source.SQLite.MeterTestConfig", null)
                        .WithMany()
                        .HasForeignKey("ForeignKey_Project");
                });
#pragma warning restore 612, 618
        }
    }
}
